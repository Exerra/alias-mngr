#!/usr/bin/env node
import Sr from"yargs";import{hideBin as cr}from"yargs/helpers";import{intro as pr}from"@clack/prompts";import R from"chalk";import{join as w}from"node:path";import{homedir as h,platform as rr}from"node:os";import{join as C}from"node:path";var m=()=>{let n=rr();if(n=="darwin"||n=="linux"){let e=h()||process.env.HOME||`/home/${process.env.USER}`,a="/.alias-manager-exerra";return C(e,"/.alias-manager-exerra")}if(n=="win32"){let e=process.env.LOCALAPPDATA;return C(e,"alias-manager-exerra")}else return null};import Y from"node:fs";import{existsSync as H,mkdirSync as er}from"node:fs";import{log as v}from"@clack/prompts";var M=(n)=>{n.command("add [name] [command]","Add a new alias",(e)=>{return e.positional("name",{describe:"Name of the alias"}).positional("command",{describe:"Command that the alias will run"})},(e)=>{let{name:a,command:r}=e,s=m();if(!s)return v.error("Invalid OS.");if(!H(s))er(s);if(!H(w(s,"aliases.json")))Y.writeFileSync(w(s,"aliases.json"),JSON.stringify([]));let i=JSON.parse(Y.readFileSync(w(s,"aliases.json"),"utf-8"));for(let o of i)if(o.name==a)return v.error("Alias with the same name already exists! Aborting...");return i.push({name:a,cmd:r,enabled:!0}),Y.writeFileSync(w(s,"aliases.json"),JSON.stringify(i)),v.success("Added alias! It is enabled by default.")})};import{exec as sr}from"node:child_process";import c from"fs";import{existsSync as J,mkdirSync as U}from"node:fs";import{homedir as $,platform as ir}from"node:os";import{promisify as ar}from"node:util";import{join as t}from"node:path";import{log as d}from"@clack/prompts";var or=ar(sr),q=(n)=>{n.command("link","Links/binds aliases to the shell. Must be run after adding/removing aliases in order to use them.",async(e)=>{let a=ir(),r=m();if(!r)return d.error("Invalid OS.");if(!J(r))U(r);if(!J(t(r,"aliases.json")))c.writeFileSync(t(r,"aliases.json"),JSON.stringify([]));let i=JSON.parse(c.readFileSync(t(r,"aliases.json"),"utf-8")).filter((o)=>o.enabled==!0);if(d.step(`Loading ${i.length} aliases.`),a=="darwin"||a=="linux"){let o=$()||process.env.HOME||`/home/${process.env.USER}`,u=process.env.SHELL,f="";for(let{name:x,cmd:O}of i)f+=`alias ${x}="${O.replaceAll('"',"\\\"")}"
`;c.writeFileSync(t(r,"aliases.sh"),f);let A="source "+t(r,"aliases.sh"),b=".bashrc",N=!0;switch(u){case"/bin/bash":b=".bashrc";break;case"/bin/zsh":b=".zshrc";break;default:N=!1}if(!N)return d.error(`Shell not supported yet. Add this manually to your ~/.<shell>rc file:

`+A);let S=c.readFileSync(t(o,b),"utf-8");if(S.includes(A))return d.success("Done! Restart your shell for the changes to take effect!");return S+=`

`+A+`
`,c.writeFileSync(t(o,b),S),d.success("Done! Restart your shell for the changes to take effect!")}if(a=="win32"){let o=$()||process.env.USERPROFILE,u="";for(let{name:p,cmd:P}of i)u+=`function ${p} { ${P} }
`;c.writeFileSync(t(r,"aliases.ps1"),u);let{stdout:f,stderr:A}=await or('powershell.exe -Command "$PROFILE"');f=f.replace("\r","").replace(`
`,"");let N=f.replace(o,"").split("\\"),S=o;for(let p of N){if(p=="")continue;if(p.replace("\r","").replace(`
`,"").endsWith(".ps1"))continue;if(!J(t(S,p)))U(t(S,p));S=t(S,p)}let x=J(f),O="";if(x)O=c.readFileSync(f,"utf-8");return O+=`

. ${t(r,"aliases.ps1")}
`,c.writeFileSync(f,O),d.success("Done! Restart your shell for the changes to take effect!")}})};import{join as j}from"node:path";import E from"node:fs";import{existsSync as z,mkdirSync as nr}from"node:fs";import{log as G}from"@clack/prompts";var K=(n)=>{n.command("remove [name]","Remove an alias by name",(e)=>{return e.positional("name",{describe:"Name of the alias"})},(e)=>{let{name:a}=e,r=m();if(!r)return G.error("Invalid OS.");if(!z(r))nr(r);if(!z(j(r,"aliases.json")))E.writeFileSync(j(r,"aliases.json"),JSON.stringify([]));let i=JSON.parse(E.readFileSync(j(r,"aliases.json"),"utf-8")).filter((o)=>o.name!=a);return E.writeFileSync(j(r,"aliases.json"),JSON.stringify(i)),G.success("Removed alias!")})};import{join as g}from"node:path";import Q from"node:fs";import{existsSync as V,mkdirSync as mr}from"node:fs";import tr from"cli-table";import{log as W}from"@clack/prompts";var X=(n)=>{n.command("list","List all aliases",(e)=>{return e},(e)=>{let a=m();if(!a)return W.error("Invalid OS.");if(!V(a))mr(a);if(!V(g(a,"aliases.json")))Q.writeFileSync(g(a,"aliases.json"),JSON.stringify([]));let r=JSON.parse(Q.readFileSync(g(a,"aliases.json"),"utf-8")),s=new tr({head:["Name","Command","Enabled?"]});for(let i of r)s.push([i.name,i.cmd,i.enabled?"Yes":"No"]);return W.success(s.toString())})};import{join as F}from"node:path";import D from"node:fs";import{existsSync as Z,mkdirSync as lr}from"node:fs";import{log as I}from"@clack/prompts";var B=(n)=>{n.command("enable [name] [command]","Enable an alias",(e)=>{return e.positional("name",{describe:"Name of the alias"})},(e)=>{let{name:a}=e,r=m();if(!r)return I.error("Invalid OS.");if(!Z(r))lr(r);if(!Z(F(r,"aliases.json")))D.writeFileSync(F(r,"aliases.json"),JSON.stringify([]));let s=JSON.parse(D.readFileSync(F(r,"aliases.json"),"utf-8")),i=-1;for(let o in s)if(s[o].name==a)i=parseInt(o);if(i==-1)return I.error("Alias could not be found. Aborting...");return s[i].enabled=!0,D.writeFileSync(F(r,"aliases.json"),JSON.stringify(s)),I.success("Enabled alias!")})};import{join as y}from"node:path";import T from"node:fs";import{existsSync as _,mkdirSync as fr}from"node:fs";import{log as L}from"@clack/prompts";var k=(n)=>{n.command("disable [name] [command]","Disable an alias",(e)=>{return e.positional("name",{describe:"Name of the alias"})},(e)=>{let{name:a}=e,r=m();if(!r)return L.error("Invalid OS.");if(!_(r))fr(r);if(!_(y(r,"aliases.json")))T.writeFileSync(y(r,"aliases.json"),JSON.stringify([]));let s=JSON.parse(T.readFileSync(y(r,"aliases.json"),"utf-8")),i=-1;for(let o in s)if(s[o].name==a)i=parseInt(o);if(i==-1)return L.error("Alias could not be found. Aborting...");return s[i].enabled=!1,T.writeFileSync(y(r,"aliases.json"),JSON.stringify(s)),L.success("Disabled alias!")})};var ur="0.0.1";pr(`${R.bold.green("alias-mngr")} ${R.gray("(v"+ur+")")} by ${R.bold("Exerra")}`);var l=Sr(cr(process.argv));M(l);K(l);q(l);X(l);B(l);k(l);l.scriptName("alias-mngr");l.example('$0 add v "open \\$1 -a \\"Visual Studio Code\\""',"");l.help("h");l.alias("h","help");l.parse();
